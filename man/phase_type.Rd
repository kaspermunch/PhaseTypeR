% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/phase_type.R
\name{phase_type}
\alias{phase_type}
\alias{mean.cont_phase_type}
\alias{var.cont_phase_type}
\alias{summary.cont_phase_type}
\title{Phase_type}
\usage{
phase_type(subint_mat = NULL, init_probs = NULL, reward_mat = NULL,
                  round_zero = NULL)

\method{mean}{cont_phase_type}(x, ...)

\method{var}{cont_phase_type}(obj, ...)

\method{summary}{cont_phase_type}(object, ...)
}
\arguments{
\item{subint_mat}{is the square matrix containing the transition rates or
probabilities between transient states for continous or discrete
phase-type respectively.
If the phase-type is continuous, the subintensity matrix diagonal should
only contains negative values and the row sums should be non-positive.
If the phase-type is discrete, the subintensity matrix should only contains
values between 0 and 1.}

\item{init_probs}{a vector, a one-row matrix or \code{NULL} which gives the
probabilities to start in each state. If init_probs is \code{NULL},
the probability to start on the first state will be 1 and to start on any
other state 0.}

\item{reward_mat}{is a matrix code{NULL}(default) where each row is a reward
vector, and each column corresponds to a state. It should have the same
number of columns as the length of the initial probabilities.}

\item{round_zero}{is an integer or \code{NULL}(default), which gives the
decimal from which we should truncate the positive values of the
subintensity matrix.
It could be useful in the scenarios where there is a reward transformation
leading to values with many decimals and potentially computational
approximation and potentially to positive row sums in continuous phase-type
.}
}
\description{
Description of the classes \code{cont_phase_type}, \code{disc_phase_type},
\code{mult_cont_phase_type}, \code{mult_disc_phase_type} which represents the
different phase-type distributions.
}
\details{
\code{phase_type} is the generator function for the four types of phase-type
classes, respectively univariate continuous or discrete and multivariate
continuous or discrete which inherits from \code{list}.
The class is generated by supplying a sub-intensity matrix and an optional
initial probability vector plus a reward matrix in the case of multivariate
phase-type.
If the initial probabilities are not specified, then the initial probability
will be \code{init_probs = c(1, 0, 0, ...)} with the same length as the
number of transient states.
}
\section{Methods (by generic)}{
\itemize{
\item \code{mean}: mean of a phase-type distribution.
For the multivariate continuous distribution if an integer is provided in
\code{v},then the mean of the variable with the specified index in the
reward matrix is returned.
If instead a vector is provided, then the means of the variables defined
by those indices will be returned.
In case of not specifying \code{v}, the means of all the variables defined by
the sub-intensity matrix are returned (default).

\item \code{var}: Gives the variance of a phase-type object,
see the specific documentation for further informations.

\item \code{summary}: pretty summary of the class.
}}

\examples{

##===========================##
## For continuous univariate ##
##===========================##

subintensity_matrix <- matrix(c(-1.5, 0, 0,
                               1.5, -1, 0,
                               0, 1, -0.5), ncol = 3)
phase_type(subintensity_matrix)

#---

subintensity_matrix <- matrix(c(-1.5, 0, 0,
                               1.5, -1, 0,
                               0, 1, -0.5), ncol = 3)
initial_probabilities <- c(0.9, 0.1, 0)
phase_type(subintensity_matrix, initial_probabilities)

##=========================##
## For discrete univariate ##
##=========================##

subintensity_matrix <- matrix(c(0.4, 0, 0,
                               0.24, 0.4, 0,
                               0.12, 0.2, 0.5), ncol = 3)
phase_type(subintensity_matrix)

#---

subintensity_matrix <- matrix(c(0.4, 0, 0,
                               0.24, 0.4, 0,
                               0.12, 0.2, 0.5), ncol = 3)
initial_probabilities <- c(0.9, 0.1, 0)
phase_type(subintensity_matrix, initial_probabilities)

##=============================##
## For continuous multivariate ##
##=============================##

subintensity_matrix <- matrix(c(-3, 0, 0,
                               2, -2, 0,
                               0, 1, -1), nrow = 3, ncol = 3)
reward_matrix = matrix(sample(seq(0, 10), 6), nrow = 3, ncol = 2)
phase_type(subintensity_matrix, reward_mat = reward_matrix)

##===========================##
## For discrete multivariate ##
##===========================##

subintensity_matrix <- matrix(c(0.4, 0, 0,
                               0.24, 0.4, 0,
                               0.12, 0.2, 0.5), ncol = 3)
reward_matrix <- matrix(sample(seq(0, 10), 6), nrow = 3, ncol = 2)
phase_type(subintensity_matrix, reward_mat = reward_matrix)

}
